#!/bin/python2 -u
from hashlib import sha256
from Crypto import Random
from Crypto.Random import random
from Crypto.Cipher import AES
from subprocess import check_output, STDOUT, CalledProcessError
from pwn import *

BLOCK_SIZE = 16
R = Random.new()

def pad(m):
    o = BLOCK_SIZE - len(m) % BLOCK_SIZE
    return m + o * chr(o)

def unpad(p):
    return p[0:-ord(p[-1])]

def send_encrypted(KEY, m, sock):
    IV = R.read(BLOCK_SIZE)
    aes = AES.new(KEY, AES.MODE_CBC, IV)
    c = aes.encrypt(pad(m))
    sock.sendline((IV + c).encode('hex'))

def read_encrypted(KEY, data):
    data = data.decode('hex')
    IV, data = data[:BLOCK_SIZE], data[BLOCK_SIZE:]
    aes = AES.new(KEY, AES.MODE_CBC, IV)
    m = unpad(aes.decrypt(data))
    return m

p = 174807157365465092731323561678522236549173502913317875393564963123330281052524687450754910240009920154525635325209526987433833785499384204819179549544106498491589834195860008906875039418684191252537604123129659746721614402346449135195832955793815709136053198207712511838753919608894095907732099313139446299843
g = 41899070570517490692126143234857256603477072005476801644745865627893958675820606802876173648371028044404957307185876963051595214534530501331532626624926034521316281025445575243636197258111995884364277423716373007329751928366973332463469104730271236078593527144954324116802080620822212777139186990364810367977

#A = 118273972112639120186970068947944724773714770611796145560317038505039351377800437911584090954295445815108415228076067419564334318734103894856428799576147989726840111816497674618324630523684004675727128364154281009934628997112127793757633331795515579928803348552388657916707518365689221161578522942036857923828
'''B = 93745993751447503346396377281638158212564483727794429481438000562251573416232023154361841727945097797806065461693048826773559972703901706048613213733868461602449808032567839707922022630860776385491198101215693030172217682493643125763047405649582118389305170287200364245392146359258691658118945747317260110074
a = 8568666222532
K = pow(B, a, p)

fKEY = sha256(str(K)).digest()

cip = ['51c684d90e37ba0b1b7b3326e979dd3be011d361c1a4468ff7bea43e5d7438ff5f6b933eacf32641b258b4127ce9faa56d3d200a684215f2dee66bb7b66b7813', 'e890233ea0859e410bb9034e59c45afcb5631d70fe32ed76dece4600d5bd8e85c4031085a3a79cb466dd4b212025aa02', '10f13939f92ef9af577d154699e7d1e77eba3e252f127c807117f56541de90c44beb0baffaf54e623611fc9b86ec79cd', '9125f22f94e17050d971c3cde99cff258ca709ef469a93a00c72e86449a44838', 'd5af9504c86c8e76a97c93da2e21e6d7789fce1a111f40dbb2093596e4c34be7']

pln = []

for c in cip:
    pln.append(read_encrypted(fKEY, c))
'''
fKEY = 'ThisIsMySecurePasswordPleaseGiveMeAShell\n'

def info(s):
    log.info(s)

host, port = 'shell2017.picoctf.com', '22071'
sock = remote(host, int(port))

inc = sock.recvuntil("supply B: ")
A = int(re.findall(r'A = \d+', inc)[0][4:])
b = random.randint(1, 2**46)
B = pow(g, b, p)
K = pow(A, b, p)

KEY = sha256(str(K)).digest()
#info('B=' + B)
sock.sendline(str(B))
send_encrypted(KEY, fKEY, sock)
while (True):
    send_encrypted(KEY, raw_input('Command:\n'), sock)
    inc = sock.recvline().rstrip()
    print(read_encrypted(KEY, inc))

